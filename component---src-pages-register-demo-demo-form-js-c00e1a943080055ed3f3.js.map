{"version":3,"sources":["webpack:///./src/pages/register/demo/demo-form.js"],"names":["phoneRegExp","passwordRegExp","withNamespaces","connect","state","language","props","t","validationSchema","Yup","firstName","required","lastName","countryResidency","city","phone","matches","email","test","value","a","String","toLowerCase","isEmailAvailable","resp","result","availability","console","error","portalPassword","min","max","portalPasswordConfirm","oneOf","tos","history","useState","activeSubmit","setActiveSubmit","isLoading","setIsLoading","setInfoBar","setErrorBar","partnerId","setPartnerId","ibId","setIbId","referral","setReferral","utmCampaign","setUtmCampaign","useEffect","params","URLSearchParams","window","location","search","get","utm","localStorage","setItem","submit","data","storedPartner","getItem","storedIbId","ibRef","storedRef","storedUtm","countryCode","getCountryCodeShort","registerDemoUser","isSuccess","replace","CP_GATE","initialValues","declarations","values","setValues","tmp","locateMe","currentCountry","getCountryByCountryCode","country","log","enableReinitialize","validateOnMount","validateOnChange","validate","validateOnBlur","onSubmit","Formis","emailPin","errors","touched","handleSubmit","handleChange","setFieldTouched","setFieldValue","countries","getSortedCountries","havePin","setHavePin","setPinBtnText","setPinBtnIcon","phoneRef","useRef","pinRef","showPasswpord1","setShowPassword1","showPasswpord2","setShowPassword2","locale","i18n","changeLanguage","current","focus","selCountry","countryCallingCode","find","calling_code","handleBlur","field","className","variant","name","helperText","Boolean","label","onChange","e","target","onBlur","fullWidth","id","options","autoHighlight","blurOnSelect","getCountryObjByName","countryEn","getOptionLabel","option","countryAr","renderOption","renderInput","inputRef","inputProps","type","InputProps","endAdornment","aria-label","onClick","checked","color","href","rel","style","fontSize","minWidth","size","disabled"],"mappings":"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","file":"component---src-pages-register-demo-demo-form-js-c00e1a943080055ed3f3.js","sourcesContent":["import React, { Component, useState, useRef, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport i18n from '../../../helpers/i18n';\r\nimport {\r\n  Typography,\r\n  Container,\r\n  Button,\r\n  TextField,\r\n  OutlinedInput,\r\n  Checkbox,\r\n  Snackbar,\r\n  CircularProgress,\r\n  InputAdornment,\r\n  IconButton\r\n} from '@material-ui/core';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { Send, ChevronRight, MoreHoriz, Check } from '@material-ui/icons';\r\n\r\nimport { Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport Visibility from '@material-ui/icons/Visibility';\r\nimport VisibilityOff from '@material-ui/icons/VisibilityOff';\r\n\r\nimport {\r\n  countryCallingCode,\r\n  getCountryByCountryCode,\r\n  getCountryObjByName,\r\n  getSortedCountries,\r\n  getCountryCodeShort\r\n} from '../../../common';\r\nimport { CP_GATE } from '../../../helpers/settings';\r\nimport {\r\n  generatePin,\r\n  isEmailAvailable,\r\n  verifyPin,\r\n  registerUser,\r\n  registerDemoUser,\r\n  locateMe\r\n} from '../../../reducers/Auth';\r\nimport { withNamespaces } from 'react-i18next';\r\n\r\nconst validEmail = (email) => {\r\n  const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n  return re.test(String(email).toLowerCase());\r\n};\r\n\r\nconst phoneRegExp = /^[\\+]?[(]?[0-9]{3}[)]?[-\\s\\.]?[0-9]{3}[-\\s\\.]?[0-9]{4,6}$/im;\r\nconst passwordRegExp = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z!@#$%^&*()_,.?\":{}|<>\\d]{8,20}$/;\r\n\r\nlet isPinVerified = false;\r\n\r\nfunction Alert(props) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <Typography\r\n      className=\"p-3\"\r\n      component=\"div\"\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      {...other}>\r\n      {value === index && <div>{children}</div>}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired\r\n};\r\n\r\nconst Form = (props) => {\r\n  const {\r\n    values: {\r\n      firstName,\r\n      lastName,\r\n      countryResidency,\r\n      city,\r\n      phone,\r\n      email,\r\n      portalPassword,\r\n      portalPasswordConfirm,\r\n      emailPin,\r\n      declarations,\r\n      tos\r\n    },\r\n    errors,\r\n    touched,\r\n    handleSubmit,\r\n    handleChange,\r\n    setFieldTouched,\r\n    setFieldValue,\r\n    activeSubmit,\r\n    isLoading,\r\n    language\r\n  } = props;\r\n  const t = props.t;\r\n  const countries = getSortedCountries();\r\n  const [havePin, setHavePin] = useState(false);\r\n  const [verifingPin, setVerifingPin] = useState(false);\r\n  const [verifiedPin, setVerifiedPin] = useState(false);\r\n  const [pinBtnText, setPinBtnText] = useState(t('Send PIN'));\r\n  const [pinBtnIcon, setPinBtnIcon] = useState(<Send />);\r\n  const myhandleChange = (e) => {\r\n    setFieldTouched(e.target.name);\r\n    handleChange(e);\r\n  };\r\n  const phoneRef = useRef();\r\n  const pinRef = useRef();\r\n\r\n  const [showPasswpord1, setShowPassword1]= useState(false);\r\n  const [showPasswpord2, setShowPassword2]= useState(false);\r\n  \r\n  const sendPin = async (e) => {\r\n    setPinBtnText(t('Sending'));\r\n    setPinBtnIcon(<MoreHoriz />);\r\n    try {\r\n      const lang = language === 'en-us' ? 'en-gb' : language;\r\n      const resp = await generatePin({ email: email, language: lang });\r\n      if (resp.isSuccess) {\r\n        setHavePin(true);\r\n        setPinBtnText(t('Enter PIN'));\r\n        setPinBtnIcon(<ChevronRight />);\r\n      }\r\n    } catch (error) {\r\n      setHavePin(false);\r\n      setPinBtnText(t('Send PIN'));\r\n      setPinBtnIcon(<Send />);\r\n    }\r\n  };\r\n\r\n  const verifyEmailPin = async () => {\r\n    setVerifingPin(true);\r\n    setPinBtnText(t('Verifying'));\r\n    setPinBtnIcon(<MoreHoriz />);\r\n    try {\r\n      const resp = await verifyPin({ email: email, value: emailPin });\r\n      if (resp.isSuccess) {\r\n        setVerifingPin(false);\r\n        setVerifiedPin(true);\r\n        setPinBtnText(t('PIN Verified'));\r\n        setPinBtnIcon(<Check />);\r\n        isPinVerified = true;\r\n      }\r\n    } catch (error) {\r\n      setVerifingPin(false);\r\n      setPinBtnText(t('Enter PIN'));\r\n      setPinBtnIcon(<ChevronRight />);\r\n      errors.emailPin = t('PIN not verified');\r\n      setFieldTouched(t('emailPin'));\r\n    }\r\n  };\r\n\r\n  useEffect(()=> {\r\n    let locale;\r\n    switch (language) {\r\n      case 'ar-ae':\r\n        locale = 'ar';\r\n        break;\r\n      case 'ja-jp':\r\n        locale = 'jp';\r\n        break;\r\n      case 'zh-cn':\r\n        locale = 'ch';\r\n        break;\r\n      case 'es-es':\r\n        locale = 'es';\r\n        break;\r\n      case 'so-kr':\r\n        locale = 'so';\r\n        break;\r\n      case 'fa-ir':\r\n        locale = 'fa';\r\n        break;\r\n      case 'ru':\r\n        locale = 'ru';\r\n        break;\r\n      case 'en-us':\r\n      default:\r\n        locale = 'en';\r\n    }\r\n    i18n.changeLanguage(locale)\r\n    // i18n.changeLanguage(language === 'ar-ae' ? 'ar' : 'en')\r\n  }, [language]);\r\n\r\n  useEffect(() => {\r\n    setHavePin(false);\r\n    setPinBtnText(t('Send PIN'));\r\n    setPinBtnIcon(<Send />);\r\n  }, [email]);\r\n\r\n  useEffect(() => {\r\n    if (havePin) pinRef.current.focus();\r\n  }, [havePin]);\r\n\r\n  // useEffect(() => {\r\n  //   if (emailPin.length === 6) verifyEmailPin();\r\n  // }, [emailPin]);\r\n\r\n  useEffect(() => {\r\n    const selCountry = countryCallingCode.find(\r\n      (countries) => countries.country === countryResidency\r\n    );\r\n    if (selCountry) {\r\n      setFieldValue('phone', '+' + selCountry.calling_code);\r\n    }\r\n  }, [countryResidency]);\r\n\r\n  const handleBlur = (field) => {\r\n    setFieldTouched(field);\r\n  };\r\n\r\n  return (\r\n    <Container className={language === 'ar-ae' ? 'dir-ar-ae' : ''}>\r\n      <form onSubmit={handleSubmit}>\r\n        <TextField\r\n          variant=\"standard\"\r\n          className=\"mb-4\"\r\n          name=\"firstName\"\r\n          helperText={touched.firstName ? errors.firstName : ''}\r\n          error={touched.firstName ? Boolean(errors.firstName) : false}\r\n          label={t('First Name')}\r\n          value={firstName}\r\n          onChange={myhandleChange}\r\n          onBlur={() => {\r\n            handleBlur('firstName');\r\n          }}\r\n          fullWidth\r\n        />\r\n        <TextField\r\n          variant=\"standard\"\r\n          className=\"mb-4\"\r\n          name=\"lastName\"\r\n          helperText={touched.lastName ? errors.lastName : ''}\r\n          error={touched.lastName ? Boolean(errors.lastName) : false}\r\n          label={t('Last Name')}\r\n          value={lastName}\r\n          onChange={handleChange}\r\n          onBlur={handleChange}\r\n          onBlur={() => {\r\n            handleBlur('lastName');\r\n          }}\r\n          fullWidth\r\n        />\r\n        <Autocomplete\r\n          id=\"country\"\r\n          className=\"mb-2\"\r\n          options={countries}\r\n          fullWidth\r\n          autoHighlight\r\n          blurOnSelect\r\n          value={getCountryObjByName(countryResidency)}\r\n          onChange={(e, value) => {setFieldValue(\"countryResidency\", value ? value.countryEn : ''); }}\r\n          getOptionLabel={(option) =>\r\n            language === 'ar-ae' ? option.countryAr : option.countryEn\r\n          }\r\n          renderOption={(option) => (\r\n            <>\r\n              {language === 'ar-ae' ? option.countryAr : option.countryEn}\r\n            </>\r\n          )}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              {...params}\r\n              label={t('Country of Residence')}\r\n              name=\"countryResidency\"\r\n              value={countryResidency}\r\n              helperText={\r\n                touched.countryResidency ? errors.countryResidency : ''\r\n              }\r\n              error={\r\n                touched.countryResidency\r\n                  ? Boolean(errors.countryResidency)\r\n                  : false\r\n              }\r\n              onBlur={() => {\r\n                handleBlur('countryResidency');\r\n              }}\r\n              variant=\"standard\"/>\r\n          )}\r\n        />\r\n        <TextField\r\n          variant=\"standard\"\r\n          className=\"mb-4\"\r\n          name=\"phone\"\r\n          inputRef={phoneRef}\r\n          onBlur={() => {\r\n            handleBlur('phone');\r\n          }}\r\n          helperText={touched.phone ? errors.phone : ''}\r\n          error={touched.phone ? Boolean(errors.phone) : false}\r\n          label={t('Phone')}\r\n          fullWidth\r\n          value={phone}\r\n          onChange={handleChange}\r\n          inputProps={{ className: 'dir-ltr' }}\r\n        />\r\n        <TextField\r\n          variant=\"standard\"\r\n          className=\"mb-4\"\r\n          name=\"email\"\r\n          helperText={touched.email ? errors.email : ''}\r\n          error={touched.email ? Boolean(errors.email) : false}\r\n          label={t('Email')}\r\n          onBlur={() => {\r\n            handleBlur('email');\r\n          }}\r\n          fullWidth\r\n          value={email}\r\n          onChange={handleChange}\r\n        />\r\n        <TextField\r\n          variant=\"standard\"\r\n          className=\"mb-2\"\r\n          name=\"portalPassword\"\r\n          onBlur={() => {\r\n            handleBlur('portalPassword');\r\n          }}\r\n          helperText={touched.portalPassword ? errors.portalPassword : ''}\r\n          error={\r\n            touched.portalPassword ? Boolean(errors.portalPassword) : false\r\n          }\r\n          label={t('Password')}\r\n          fullWidth\r\n          type={showPasswpord1 ? 'text': 'password'}\r\n          value={portalPassword}\r\n          onChange={handleChange}\r\n        \r\n          InputProps={{\r\n            endAdornment:\r\n            <IconButton\r\n                aria-label=\"toggle password visibility\"\r\n                onClick={()=>{setShowPassword1(!showPasswpord1)}}\r\n              >\r\n                {showPasswpord1? <Visibility/>: <VisibilityOff/>}\r\n              </IconButton>,\r\n            }}\r\n\r\n        />\r\n\r\n        <TextField\r\n            variant=\"standard\"\r\n            className=\"mb-2\"\r\n            name=\"portalPasswordConfirm\"\r\n            onBlur={() => {\r\n              handleBlur('portalPasswordConfirm');\r\n            }}\r\n            helperText={touched.portalPasswordConfirm ? errors.portalPasswordConfirm : ''}\r\n            error={\r\n              touched.portalPasswordConfirm ? Boolean(errors.portalPasswordConfirm) : false\r\n            }\r\n            label={t('Confirm Password')}\r\n            fullWidth\r\n            type={showPasswpord2 ? 'text': 'password'}\r\n            value={portalPasswordConfirm}\r\n            onChange={handleChange}\r\n          \r\n            InputProps={{\r\n              endAdornment:\r\n              <IconButton\r\n                  aria-label=\"toggle password visibility\"\r\n                  onClick={()=>{setShowPassword2(!showPasswpord2)}}\r\n                >\r\n                  {showPasswpord2? <Visibility/>: <VisibilityOff/>}\r\n                </IconButton>,\r\n              }}\r\n\r\n          />\r\n        \r\n        {/* <IconButton\r\n          aria-label=\"toggle password visibility\"\r\n          onClick={handleClickShowPassword}>\r\n          {state.showPassword ? (\r\n            <Visibility />\r\n          ) : (\r\n            <VisibilityOff />\r\n          )}\r\n        </IconButton> */}\r\n        <div className=\"mb-4\">\r\n          <div className=\"badge badge-pill badge-info mr-1\">\r\n            {t('8-20 characters')}\r\n          </div>\r\n          <div className=\"badge badge-pill badge-info mr-1\">\r\n            {t('Latin Letters')}\r\n          </div>\r\n          <div className=\"badge badge-pill badge-info mr-1\">{t('Numbers')}</div>\r\n        </div>\r\n        {/* <div className=\"d-flex align-items-center justify-content-start\">\r\n          <Button\r\n            className=\"btn-warning mb-4\"\r\n            disabled={Boolean(errors.email) || havePin}\r\n            endIcon={pinBtnIcon}\r\n            onClick={sendPin}>\r\n            {t(pinBtnText)}\r\n          </Button>\r\n          <TextField\r\n            variant=\"standard\"\r\n            className=\"mb-4 mx-3\"\r\n            inputRef={pinRef}\r\n            label={t('Enter PIN')}\r\n            helperText={touched.emailPin ? errors.emailPin : ''}\r\n            error={touched.emailPin ? Boolean(errors.emailPin) : false}\r\n            value={emailPin}\r\n            onChange={handleChange}\r\n            name=\"emailPin\"\r\n            disabled={!havePin || verifingPin || verifiedPin}\r\n          />\r\n        </div>\r\n        {havePin && (\r\n          <div className=\"MuiFormHelperText-root mb-4 text-center text-danger\">\r\n            {t('PIN sent to your email, please verify')}\r\n          </div>\r\n        )} */}\r\n        <div className=\"d-flex justify-content-between\">\r\n          <Checkbox\r\n            checked={tos}\r\n            onChange={handleChange}\r\n            name=\"tos\"\r\n            id=\"tos\"\r\n            value=\"true\"\r\n            className=\"align-self-start p-0 mx-2\"\r\n            color=\"default\"\r\n          />\r\n          <div className=\"mb-4\">\r\n            <p>\r\n              {t('By clicking here I give my consent for')}\r\n              &nbsp; <b>{t('Bank al Ethihad')}</b> &nbsp;\r\n              {t(\r\n                'to contact me for marketing purposes, You can opt out at any time, For further details please see our'\r\n              )}\r\n              <a\r\n                href=\"https://exiniti.blob.core.windows.net/public/Accuindex-Limited-Privacy-Notice.pdf\"\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className=\"link\">\r\n                {t('Marketing and Communication Policy Statement')}\r\n              </a>\r\n              .\r\n            </p>\r\n            <p\r\n              className=\"MuiFormHelperText-root Mui-error\"\r\n              style={{ color: 'red', fontSize: 'small' }}>\r\n              {touched.emailPin &&\r\n                errors.tos &&\r\n                t('You must tick the consent form')}\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div className=\"text-center\">\r\n          <Button\r\n            style={{ minWidth: '8rem' }}\r\n            type=\"submit\"\r\n            size=\"large\"\r\n            className=\"btn-success\"\r\n            disabled={!activeSubmit || props.isLoading}>\r\n            {props.isLoading ? (\r\n              <CircularProgress size={20} />\r\n            ) : (\r\n              t('Register Now')\r\n            )}\r\n          </Button>\r\n        </div>\r\n      </form>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst LivePreviewExample = (props) => {\r\n  const t = props.t;\r\n  const validationSchema = Yup.object({\r\n    firstName: Yup.string('Enter a first name').required(\r\n      t('First name is required')\r\n    ),\r\n    lastName: Yup.string('Enter a last name').required(\r\n      t('Last name is required')\r\n    ),\r\n    countryResidency: Yup.string('Select your country of residence').required(\r\n      t('Country of residence is required')\r\n    ),\r\n    city: Yup.string('Enter City'),\r\n    phone: Yup.string('Enter your Phone')\r\n      .required(t('Phone is required'))\r\n      .matches(phoneRegExp, t('Phone number is not valid')),\r\n    email: Yup.string('Enter your email')\r\n      .required(t('Email is required'))\r\n      .email(t('Enter a valid email'))\r\n      .test(\r\n        'email-availability',\r\n        t('Account already exists with this email, Kindly login'),\r\n        async (value) => {\r\n          try {\r\n            if (validEmail(value)) {\r\n              const resp = await isEmailAvailable({\r\n                email: value.toLowerCase()\r\n              });\r\n\r\n              return resp.result.availability;\r\n            }\r\n            return false;\r\n          } catch (error) {\r\n            console.error(error);\r\n            return false;\r\n          }\r\n        }\r\n      ),\r\n    portalPassword: Yup.string('')\r\n      .min(8, t('Password must contain atleast 8 characters'))\r\n      .max(20, t('Password should not be more than 20 characters long'))\r\n      .matches(\r\n        passwordRegExp,\r\n        t('Atleast one lower case, upper case and number required')\r\n      )\r\n      .required(t('Enter your password')),\r\n    portalPasswordConfirm: Yup.string('')\r\n    .oneOf([Yup.ref('portalPassword'), null], 'Passwords must match').required(t('Enter confirm password')),\r\n    // emailPin: Yup.string('')\r\n    //   .required(t('PIN must be entered'))\r\n    //   .length(6, t('Pin should be 6 characters exact')),\r\n    // .test('verify-pin', 'PIN must be verfied', async (value) => {\r\n    //   return isPinVerified;\r\n    // }),\r\n    tos: Yup.boolean().oneOf([true], t('Accept Terms & Conditions is required'))\r\n  });\r\n\r\n  const { history, language } = props;\r\n\r\n  const [activeSubmit, setActiveSubmit] = useState(true);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const [infoBar, setInfoBar] = useState(false);\r\n  const [errorBar, setErrorBar] = useState(false);\r\n  const [partnerId, setPartnerId] = useState(false);\r\n  const [ibId, setIbId] = useState(false);\r\n  const [referral, setReferral] = useState(false);\r\n  const [utmCampaign, setUtmCampaign] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const params = new URLSearchParams(window.location.search);\r\n    const partnerId = params.get('ibRef');\r\n    const ibId = params.get('ibId');\r\n    const referral = params.get('ref');\r\n    \r\n    const utm = params.get('utm-campaign');\r\n    if (partnerId) {\r\n      setPartnerId(partnerId);\r\n      localStorage.setItem('partnerId', partnerId)\r\n    }\r\n    if(ibId){\r\n      setIbId(ibId);\r\n      localStorage.setItem('ibId', ibId)\r\n    }\r\n    if (referral) {\r\n      setReferral(referral);\r\n      localStorage.setItem('referral', referral)\r\n    }\r\n    if (utm) {\r\n      setUtmCampaign(utm)\r\n      localStorage.setItem('utm', utm)\r\n    }\r\n  }, []);\r\n\r\n  const submit = async (data) => {\r\n    setActiveSubmit(false);\r\n    setIsLoading(true);\r\n    let storedPartner = localStorage.getItem('partnerId')\r\n    let storedIbId = localStorage.getItem('ibId');\r\n\r\n    if (partnerId) data.ibRef = partnerId;\r\n    else if(storedPartner) data.ibRef = storedPartner\r\n\r\n    if(ibId) data.ibId = ibId;\r\n    else if(storedIbId) data.ibId = storedIbId;\r\n\r\n    try {\r\n      let storedRef = localStorage.getItem('referral')\r\n      let storedUtm = localStorage.getItem('utm')\r\n      if(referral) data.referral = referral\r\n      else if(storedRef)  data.referral = storedRef\r\n      else data.referral = null\r\n\r\n      if(utmCampaign) data.utmCampaign = utmCampaign\r\n        else if(storedUtm)  data.utmCampaign = storedUtm\r\n          else data.utmCampaign = null\r\n      \r\n      data.countryCode = getCountryCodeShort(data.countryResidency)\r\n      const resp = await registerDemoUser(data);\r\n\r\n      setIsLoading(false);\r\n      if (resp.isSuccess) {\r\n        setInfoBar(true);\r\n        window.location.replace(`${CP_GATE}?token=${resp.result}`);\r\n      } else {\r\n        setErrorBar(true);\r\n        setActiveSubmit(true);\r\n      }\r\n    } catch (error) {\r\n      setErrorBar(true);\r\n      setActiveSubmit(true);\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const initialValues = {\r\n    firstName: '',\r\n    lastName: '',\r\n    countryResidency: 'United Arab Emirates',\r\n    phone: '+971',\r\n    email: '',\r\n    portalPassword: '',\r\n    portalPasswordConfirm: '',\r\n    // emailPin: '',\r\n    declarations: [\r\n      'By clicking here I give my consent for Accuindex to contact me for marketing purposes. You can opt out at any time. For further details please see ourMarketing and Communication Policy Statement.'\r\n    ],\r\n    tos: false,\r\n    language: language === 'en-us' ? 'en-gb' : language\r\n  };\r\n\r\n  const handleInfoBarClose = () => {\r\n    setInfoBar(false);\r\n  };\r\n\r\n  const handleErrorBarClose = () => {\r\n    setErrorBar(false);\r\n  };\r\n\r\n  const [values, setValues] = useState(initialValues);\r\n\r\n  const tmp = async () => {\r\n    try {\r\n      const currentCountry = await locateMe();\r\n      setValues({\r\n        ...values,\r\n        countryResidency: getCountryByCountryCode(currentCountry.country || 'AE')\r\n      });\r\n    } catch (error) {\r\n      console.log('Locate Error', error);\r\n      setValues({\r\n        ...values,\r\n        countryResidency: getCountryByCountryCode('AE')\r\n      });\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    tmp();\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <Formik\r\n        enableReinitialize={true}\r\n        validateOnMount={false}\r\n        validateOnChange={true}\r\n        validate={false}\r\n        validateOnBlur={true}\r\n        initialValues={values}\r\n        validationSchema={validationSchema}\r\n        onSubmit={submit}>\r\n        {(props) => (\r\n          <Formis\r\n            activeSubmit={activeSubmit}\r\n            isLoading={isLoading}\r\n            language={language}\r\n            {...props}\r\n          />\r\n        )}\r\n      </Formik>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    // Auth: state.Auth\r\n    language: state.language\r\n  };\r\n};\r\n\r\n// export default LivePreviewExample;\r\nexport default withNamespaces()(\r\n  connect(mapStateToProps, { })(LivePreviewExample)\r\n);\r\nconst Formis = withNamespaces()(Form);\r\n"],"sourceRoot":""}